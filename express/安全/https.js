// 只要你想让你的网站被人登录，那么你就需要掌握一点安全机制的知识。

// 1：https协议基于服务器上的公匙证书，ssl证书。
// 获取证书的方法：自己生成，openssl .ca机构那里购买。


// express怎样启用https。
var https=require('https');
var fs=require('fs')
var options={
  key:fs.readFileSync(__dirname+'ssl/meadowlark.pem');
  cert:fs.readFileSync(__dirname+'ssl/meadowlark.crt');
}

https.createServer(options,app).listen(3000)
// =========
// 关于端口的说明
// 当你在访问网站的时候，总会连接到特定的端口上，即便在URL中没有指定也是这样。如果没有指明端口，浏览器会
  // 假定http使用的端口是80。https指定的端口是443。

// =========
// 可以看到的是在express中使用https是非常容易的，但是当你想要扩展网站来处理更多流量的时候，就需要NGIX
// 这样的代理服务器了，如果用了代理服务器的话，那么客户端可能会和代理服务器通信，不是直接连接到你的服务器上
// 然后可能代理服务器可能会通过常规的http通信来跟你的应用通信。这也就是人们常说的https止于代理服务器。



// ========
// 跨站请求伪造
// 抓住了用户的两个漏洞，1：你相信自己的浏览器，2：你一次会打开很多的网站。在csrf攻击中，恶意站点上的脚本会请求
    // 会请求另外一个网站：如果你在另一个网站上登录过，恶意网站可以成功的访问那个网站上的安全数据。


// 要防范csrf攻击，你必须想办法确保请求合法的来自你的网站。一般的做法是给浏览器传一个唯一的令牌。当浏览器
   // 提交表单时，服务器会进行检查，以确保令牌是匹配的。csurf中间件负责令牌的创建和验证。你只需要确保令牌
   //包含在服务器的请求中。

// csurf



// 认证：验证用户的身份，即他们是自己所宣称的人
// 授权：确定用户有哪些权利，可以访问，修改或者查看什么？



// 第三方认证：第三方认证被称为联合认证或代理认证。首先你的认证负担降低了。不用为单个用户操心，只
             // 只要交给第三方的交互就行了。第二个优势就是他能减轻密码疲劳了。第三方认证，“没有摩擦”，
             // 用户可以用他们已有的账户更快的用上你的网站。如果用户知道他们还需要在建一个用户名和密码，经常会离开



// 其实也就是登录和注册那点事，还有第三方登录的情况。


