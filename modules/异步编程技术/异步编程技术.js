// node世界的两种响应逻辑，回调-----事件监听

// node使用的是非阻塞型的IO，所以node对每个回调函数的执行是非常快的。并不需要等待io的完成。

// 用事件发射器处理重复性的事件：事件发射器在那些时间被触发时处理他们，一些重要的node api组件，都被做成了事件发射器，可以相应事件的触发

// 事件发射器举例：广播当前的消息，

// 事件环机制：就像一个邮递员，每个事件就是邮递员需要发送的信，他手上有大量需要送到的信。
   // 送信的地址就是每个事件的回调函数，由于邮递员只有一双腿，所以每次只能按照指定路线送一封信，也就是说，每次只能处理一个回调函数，在他按照某条指定线路
   // 送达某封信的途中，可能会有人给他送新的邮件，这就是代码要他处理的新事件。在这种情况下，邮递员会转而处理新的事件，在该事件处理完成之后，转而处理旧的
   // 的事件。这种环形处理机制，在node中称为事件环机制。


// 实例：用户在页面上向服务器发送了一个客户端请求，这将触发http服务器的一个request事件，在事件回调函数中处理该请求，根据请求参数来决定从数据库中获取哪些
        //数据，然后向数据库中发出获取数据的请求，并且将另一个函数的指定为当获取到数据的回调函数，当从数据库获取到数据的时候，就触发数据库对象的response
        //事件，调用callback回调函数中的后续代码，将结果返回给用户。关键的是：由于nodeJs采取的是非阻塞的IO机制，因此不需要等待数据库中读取数据完毕在执
        //回调函数，而是为数据库对象绑定一个新的事件，并初始化该事件的事件回调函数。 